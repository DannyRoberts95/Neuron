{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dan/Documents/Coding/blog/web/pages/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// index.js\nimport Link from \"next/link\";\nimport groq from \"groq\";\nimport client from \"../client\";\nimport React from \"react\";\nimport \"fullpage.js/vendors/scrolloverflow\"; // Optional. When using scrollOverflow:true\n\nimport { SectionsContainer, Section } from \"react-fullpage\";\n\nconst Index = props => {\n  console.log(props);\n  const {\n    posts = []\n  } = props;\n  const {\n    projects = []\n  } = props;\n  const postLinks = posts.map(({\n    _id,\n    title = \"\",\n    slug = \"\",\n    _updatedAt = \"\"\n  }) => slug && /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/post/[slug]\",\n      as: `/post/${slug.current}`,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }, this), \" \", \"(\", new Date(_updatedAt).toDateString(), \")\"]\n  }, _id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this));\n  const projectLinks = projects.map(({\n    _id,\n    title = \"\",\n    slug = \"\",\n    _updatedAt = \"\"\n  }) => slug && /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/project/[slug]\",\n      as: `/project/${slug.current}`,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this), \" \", \"(\", new Date(_updatedAt).toDateString(), \")\"]\n  }, _id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this));\n  let options = {};\n  return /*#__PURE__*/_jsxDEV(SectionsContainer, _objectSpread(_objectSpread({}, options), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      children: \"Page 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      children: \"Page 2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      children: \"Page 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\nIndex.getInitialProps = async () => ({\n  posts: await client.fetch(groq`\n      *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\n    `),\n  projects: await client.fetch(groq`\n      *[_type == \"project\" && publishedAt < now()]|order(publishedAt desc)\n    `)\n});\n\nexport default Index;","map":{"version":3,"sources":["/Users/dan/Documents/Coding/blog/web/pages/index.js"],"names":["Link","groq","client","React","SectionsContainer","Section","Index","props","console","log","posts","projects","postLinks","map","_id","title","slug","_updatedAt","current","Date","toDateString","projectLinks","options","getInitialProps","fetch"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,oCAAP,C,CAA6C;;AAC7C,SAASC,iBAAT,EAA4BC,OAA5B,QAA2C,gBAA3C;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM;AAAEG,IAAAA,KAAK,GAAG;AAAV,MAAiBH,KAAvB;AACA,QAAM;AAAEI,IAAAA,QAAQ,GAAG;AAAb,MAAoBJ,KAA1B;AAEA,QAAMK,SAAS,GAAGF,KAAK,CAACG,GAAN,CAChB,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAK,GAAG,EAAf;AAAmBC,IAAAA,IAAI,GAAG,EAA1B;AAA8BC,IAAAA,UAAU,GAAG;AAA3C,GAAD,KACED,IAAI,iBACF;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAA0B,MAAA,EAAE,EAAG,SAAQA,IAAI,CAACE,OAAQ,EAApD;AAAA,6BACE;AAAA,kBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAGU,GAHV,OAII,IAAII,IAAJ,CAASF,UAAT,EAAqBG,YAArB,EAJJ;AAAA,KAASN,GAAT;AAAA;AAAA;AAAA;AAAA,UAHY,CAAlB;AAYA,QAAMO,YAAY,GAAGV,QAAQ,CAACE,GAAT,CACnB,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAK,GAAG,EAAf;AAAmBC,IAAAA,IAAI,GAAG,EAA1B;AAA8BC,IAAAA,UAAU,GAAG;AAA3C,GAAD,KACED,IAAI,iBACF;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,iBAAX;AAA6B,MAAA,EAAE,EAAG,YAAWA,IAAI,CAACE,OAAQ,EAA1D;AAAA,6BACE;AAAA,kBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAGU,GAHV,OAII,IAAII,IAAJ,CAASF,UAAT,EAAqBG,YAArB,EAJJ;AAAA,KAASN,GAAT;AAAA;AAAA;AAAA;AAAA,UAHe,CAArB;AAYA,MAAIQ,OAAO,GAAG,EAAd;AAEA,sBACE,QAAC,iBAAD,kCAAuBA,OAAvB;AAAA,4BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAtCD;;AAwCAhB,KAAK,CAACiB,eAAN,GAAwB,aAAa;AACnCb,EAAAA,KAAK,EAAE,MAAMR,MAAM,CAACsB,KAAP,CAAavB,IAAK;AACjC;AACA,KAFe,CADsB;AAInCU,EAAAA,QAAQ,EAAE,MAAMT,MAAM,CAACsB,KAAP,CAAavB,IAAK;AACpC;AACA,KAFkB;AAJmB,CAAb,CAAxB;;AASA,eAAeK,KAAf","sourcesContent":["// index.js\nimport Link from \"next/link\";\nimport groq from \"groq\";\nimport client from \"../client\";\n\nimport React from \"react\";\nimport \"fullpage.js/vendors/scrolloverflow\"; // Optional. When using scrollOverflow:true\nimport { SectionsContainer, Section } from \"react-fullpage\";\n\nconst Index = (props) => {\n  console.log(props);\n  const { posts = [] } = props;\n  const { projects = [] } = props;\n\n  const postLinks = posts.map(\n    ({ _id, title = \"\", slug = \"\", _updatedAt = \"\" }) =>\n      slug && (\n        <li key={_id}>\n          <Link href=\"/post/[slug]\" as={`/post/${slug.current}`}>\n            <a>{title}</a>\n          </Link>{\" \"}\n          ({new Date(_updatedAt).toDateString()})\n        </li>\n      )\n  );\n\n  const projectLinks = projects.map(\n    ({ _id, title = \"\", slug = \"\", _updatedAt = \"\" }) =>\n      slug && (\n        <li key={_id}>\n          <Link href=\"/project/[slug]\" as={`/project/${slug.current}`}>\n            <a>{title}</a>\n          </Link>{\" \"}\n          ({new Date(_updatedAt).toDateString()})\n        </li>\n      )\n  );\n\n  let options = {};\n\n  return (\n    <SectionsContainer {...options}>\n      <Section>Page 1</Section>\n      <Section>Page 2</Section>\n      <Section>Page 3</Section>\n    </SectionsContainer>\n  );\n};\n\nIndex.getInitialProps = async () => ({\n  posts: await client.fetch(groq`\n      *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\n    `),\n  projects: await client.fetch(groq`\n      *[_type == \"project\" && publishedAt < now()]|order(publishedAt desc)\n    `),\n});\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}