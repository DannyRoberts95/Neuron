{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dan/Documents/Coding/blog/web/pages/index.js\";\n// index.js\nimport Link from \"next/link\";\nimport groq from \"groq\";\nimport client from \"../client\";\nimport React from \"react\";\nimport \"fullpage.js/vendors/scrolloverflow\"; // Optional. When using scrollOverflow:true\n\nimport ReactFullpage from \"@fullpage/react-fullpage\";\n\nconst Index = props => {\n  console.log(props);\n  const {\n    posts = []\n  } = props;\n  const {\n    projects = []\n  } = props;\n  const postLinks = posts.map(({\n    _id,\n    title = \"\",\n    slug = \"\",\n    _updatedAt = \"\"\n  }) => slug && /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/post/[slug]\",\n      as: `/post/${slug.current}`,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }, this), \" \", \"(\", new Date(_updatedAt).toDateString(), \")\"]\n  }, _id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this));\n  const projectLinks = projects.map(({\n    _id,\n    title = \"\",\n    slug = \"\",\n    _updatedAt = \"\"\n  }) => slug && /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/project/[slug]\",\n      as: `/project/${slug.current}`,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this), \" \", \"(\", new Date(_updatedAt).toDateString(), \")\"]\n  }, _id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Fullpage, {\n    children: /*#__PURE__*/_jsxDEV(FullPageSections, {\n      children: [/*#__PURE__*/_jsxDEV(FullpageSection, {\n        style: {\n          height: \"100vh\",\n          padding: \"1em\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Posts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FullpageSection, {\n        style: {\n          padding: \"1em\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FullpageSection, {\n        style: {\n          backgroundColor: \"firebrick\",\n          padding: \"1em\"\n        },\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\nIndex.getInitialProps = async () => ({\n  posts: await client.fetch(groq`\n      *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\n    `),\n  projects: await client.fetch(groq`\n      *[_type == \"project\" && publishedAt < now()]|order(publishedAt desc)\n    `)\n});\n\nexport default Index;","map":{"version":3,"sources":["/Users/dan/Documents/Coding/blog/web/pages/index.js"],"names":["Link","groq","client","React","ReactFullpage","Index","props","console","log","posts","projects","postLinks","map","_id","title","slug","_updatedAt","current","Date","toDateString","projectLinks","height","padding","backgroundColor","getInitialProps","fetch"],"mappings":";;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,oCAAP,C,CAA6C;;AAC7C,OAAOC,aAAP,MAA0B,0BAA1B;;AAGA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM;AAAEG,IAAAA,KAAK,GAAG;AAAV,MAAiBH,KAAvB;AACA,QAAM;AAAEI,IAAAA,QAAQ,GAAG;AAAb,MAAoBJ,KAA1B;AAEA,QAAMK,SAAS,GAAGF,KAAK,CAACG,GAAN,CAChB,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAK,GAAG,EAAf;AAAmBC,IAAAA,IAAI,GAAG,EAA1B;AAA8BC,IAAAA,UAAU,GAAG;AAA3C,GAAD,KACED,IAAI,iBACF;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAA0B,MAAA,EAAE,EAAG,SAAQA,IAAI,CAACE,OAAQ,EAApD;AAAA,6BACE;AAAA,kBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAGU,GAHV,OAII,IAAII,IAAJ,CAASF,UAAT,EAAqBG,YAArB,EAJJ;AAAA,KAASN,GAAT;AAAA;AAAA;AAAA;AAAA,UAHY,CAAlB;AAYA,QAAMO,YAAY,GAAGV,QAAQ,CAACE,GAAT,CACnB,CAAC;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,KAAK,GAAG,EAAf;AAAmBC,IAAAA,IAAI,GAAG,EAA1B;AAA8BC,IAAAA,UAAU,GAAG;AAA3C,GAAD,KACED,IAAI,iBACF;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,iBAAX;AAA6B,MAAA,EAAE,EAAG,YAAWA,IAAI,CAACE,OAAQ,EAA1D;AAAA,6BACE;AAAA,kBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAGU,GAHV,OAII,IAAII,IAAJ,CAASF,UAAT,EAAqBG,YAArB,EAJJ;AAAA,KAASN,GAAT;AAAA;AAAA;AAAA;AAAA,UAHe,CAArB;AAYA,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,gBAAD;AAAA,8BACE,QAAC,eAAD;AACE,QAAA,KAAK,EAAE;AACLQ,UAAAA,MAAM,EAAE,OADH;AAELC,UAAAA,OAAO,EAAE;AAFJ,SADT;AAAA,+BAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,eAAD;AACE,QAAA,KAAK,EAAE;AACLA,UAAAA,OAAO,EAAE;AADJ,SADT;AAAA,+BAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cATF,eAgBE,QAAC,eAAD;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,eAAe,EAAE,WADZ;AAELD,UAAAA,OAAO,EAAE;AAFJ,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CA1DD;;AA4DAjB,KAAK,CAACmB,eAAN,GAAwB,aAAa;AACnCf,EAAAA,KAAK,EAAE,MAAMP,MAAM,CAACuB,KAAP,CAAaxB,IAAK;AACjC;AACA,KAFe,CADsB;AAInCS,EAAAA,QAAQ,EAAE,MAAMR,MAAM,CAACuB,KAAP,CAAaxB,IAAK;AACpC;AACA,KAFkB;AAJmB,CAAb,CAAxB;;AASA,eAAeI,KAAf","sourcesContent":["// index.js\nimport Link from \"next/link\";\nimport groq from \"groq\";\nimport client from \"../client\";\n\nimport React from \"react\";\nimport \"fullpage.js/vendors/scrolloverflow\"; // Optional. When using scrollOverflow:true\nimport ReactFullpage from \"@fullpage/react-fullpage\";\n\n\nconst Index = (props) => {\n  console.log(props);\n  const { posts = [] } = props;\n  const { projects = [] } = props;\n\n  const postLinks = posts.map(\n    ({ _id, title = \"\", slug = \"\", _updatedAt = \"\" }) =>\n      slug && (\n        <li key={_id}>\n          <Link href=\"/post/[slug]\" as={`/post/${slug.current}`}>\n            <a>{title}</a>\n          </Link>{\" \"}\n          ({new Date(_updatedAt).toDateString()})\n        </li>\n      )\n  );\n\n  const projectLinks = projects.map(\n    ({ _id, title = \"\", slug = \"\", _updatedAt = \"\" }) =>\n      slug && (\n        <li key={_id}>\n          <Link href=\"/project/[slug]\" as={`/project/${slug.current}`}>\n            <a>{title}</a>\n          </Link>{\" \"}\n          ({new Date(_updatedAt).toDateString()})\n        </li>\n      )\n  );\n\n  return (\n    <Fullpage>\n      <FullPageSections>\n        <FullpageSection\n          style={{\n            height: \"100vh\",\n            padding: \"1em\",\n          }}\n        >\n          <h1>Posts</h1>\n        </FullpageSection>\n        <FullpageSection\n          style={{\n            padding: \"1em\",\n          }}\n        >\n          <h1>Projects</h1>\n        </FullpageSection>\n        <FullpageSection\n          style={{\n            backgroundColor: \"firebrick\",\n            padding: \"1em\",\n          }}\n        >\n          3\n        </FullpageSection>\n      </FullPageSections>\n    </Fullpage>\n  );\n};\n\nIndex.getInitialProps = async () => ({\n  posts: await client.fetch(groq`\n      *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\n    `),\n  projects: await client.fetch(groq`\n      *[_type == \"project\" && publishedAt < now()]|order(publishedAt desc)\n    `),\n});\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}