{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dan/Documents/Coding/blog/web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dan/Documents/Coding/blog/web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dan/Documents/Coding/blog/web/pages/test/index.js\",\n    _this = this;\n\n// [slug].js\nimport FullPage from \"../../src/components/FullPage\";\nimport FirstComponent from \"../../src/components/FirstComponent\";\nimport SecondComponent from \"../../src/components/SecondComponent\";\nimport ThirdComponent from \"../../src/components/ThirdComponent\";\n\nvar Test = function Test(props) {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(FullPage, {\n    children: [/*#__PURE__*/_jsxDEV(FirstComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(SecondComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ThirdComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Test;\n\nTest.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var _context$query$slug, slug;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // It's important to default the slug so that it doesn't return \"undefined\"\n            _context$query$slug = context.query.slug, slug = _context$query$slug === void 0 ? \"\" : _context$query$slug;\n            _context.next = 3;\n            return client.fetch(query, {\n              slug: slug\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/dan/Documents/Coding/blog/web/pages/test/index.js"],"names":["FullPage","FirstComponent","SecondComponent","ThirdComponent","Test","props","console","log","getInitialProps","context","query","slug","client","fetch"],"mappings":";;;;;;;AAAA;AACA,OAAOA,QAAP,MAAqB,+BAArB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,cAAP,MAA2B,qCAA3B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,aAHF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CATD;;KAAMD,I;;AAWNA,IAAI,CAACI,eAAL;AAAA,sEAAuB,iBAAgBC,OAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrB;AADqB,kCAECA,OAAO,CAACC,KAFT,CAEbC,IAFa,EAEbA,IAFa,oCAEN,EAFM;AAAA;AAAA,mBAGRC,MAAM,CAACC,KAAP,CAAaH,KAAb,EAAoB;AAAEC,cAAAA,IAAI,EAAJA;AAAF,aAApB,CAHQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeP,IAAf","sourcesContent":["// [slug].js\nimport FullPage from \"../../src/components/FullPage\";\nimport FirstComponent from \"../../src/components/FirstComponent\";\nimport SecondComponent from \"../../src/components/SecondComponent\";\nimport ThirdComponent from \"../../src/components/ThirdComponent\";\n\nconst Test = (props) => {\n  console.log(props);\n  return (\n    <FullPage>\n      <FirstComponent />\n      <SecondComponent />\n      <ThirdComponent />\n    </FullPage>\n  );\n};\n\nTest.getInitialProps = async function (context) {\n  // It's important to default the slug so that it doesn't return \"undefined\"\n  const { slug = \"\" } = context.query;\n  return await client.fetch(query, { slug });\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}